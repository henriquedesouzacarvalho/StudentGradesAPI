# Azure DevOps Pipeline for StudentGradesAPI .NET 9 Application
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
      - fix/*
  paths:
    exclude:
      - README.md
      - docs/*

pr:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs/*

variables:
  buildConfiguration: "Release"
  dotNetVersion: "9.x"
  projectPath: "API/StudentGradesAPI.csproj"
  testProjectPath: "StudentGradesAPI.Tests/StudentGradesAPI.Tests.csproj"
  solutionPath: "StudentGradesAPI.sln"

stages:
  - stage: Build
    displayName: "Build and Test"
    jobs:
      - job: BuildAndTest
        displayName: "Build and Test Application"
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - checkout: self
            fetchDepth: "0"

          - task: PowerShell@2
            displayName: "Debug GitVersion"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "Branch: $(Build.SourceBranch)"
                git branch -a
                cat gitversion.yml

          - task: PowerShell@2
            displayName: "GitVersion"
            inputs:
              targetType: "inline"
              script: |
                dotnet tool install --global GitVersion.Tool --version 5.12.0
                $version = dotnet-gitversion | ConvertFrom-Json
                Write-Host "##vso[task.setvariable variable=GitVersion.SemVer]$($version.SemVer)"
                Write-Host "Version: $($version.SemVer)"

          - task: PowerShell@2
            displayName: "Create Git Tag"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              targetType: "inline"
              script: |
                git config user.email "pipeline@company.com"
                git config user.name "Azure Pipeline"
                git tag "v$(GitVersion.SemVer)"
                git push origin "v$(GitVersion.SemVer)"

          - task: UseDotNet@2
            displayName: "Install .NET 9 SDK"
            inputs:
              packageType: "sdk"
              version: "$(dotNetVersion)"
              includePreviewVersions: false

          - task: DotNetCoreCLI@2
            displayName: "Restore packages"
            inputs:
              command: "restore"
              projects: "$(solutionPath)"

          - task: DotNetCoreCLI@2
            displayName: "Build solution"
            inputs:
              command: "build"
              projects: "$(solutionPath)"
              arguments: "--configuration $(buildConfiguration) --no-restore"

          - task: DotNetCoreCLI@2
            displayName: "Run tests"
            inputs:
              command: "test"
              projects: "$(testProjectPath)"
              arguments: '--configuration $(buildConfiguration) --no-build --logger trx --collect:"XPlat Code Coverage" --settings coverlet.runsettings'
              publishTestResults: true

          - task: PublishTestResults@2
            displayName: "Publish test results"
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "VSTest"
              testResultsFiles: "**/*.trx"
              mergeTestResults: true

          - task: DotNetCoreCLI@2
            displayName: "Publish application"
            inputs:
              command: "publish"
              projects: "$(projectPath)"
              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --no-build"
              zipAfterPublish: true

          - publish: "$(Build.ArtifactStagingDirectory)"
            artifact: "drop"
            displayName: "Publish artifacts"

  - stage: DeployDev
    displayName: "Deploy to Development"
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployToDev
        displayName: "Deploy to Development Environment"
        pool:
          vmImage: "ubuntu-latest"
        environment: "Development"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: "drop"

                - task: AzureWebApp@1
                  displayName: "Deploy to Azure App Service"
                  inputs:
                    azureSubscription: "Azure-StudentGrades-Connection"
                    appType: "webApp"
                    appName: "studentgrades-dev"
                    package: "$(Pipeline.Workspace)/drop/*.zip"

  - stage: DeployProd
    displayName: "Deploy to Production"
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProd
        displayName: "Deploy to Production Environment"
        pool:
          vmImage: "ubuntu-latest"
        environment: "Production"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: "drop"

                - task: AzureWebApp@1
                  displayName: "Deploy to Azure App Service"
                  inputs:
                    azureSubscription: "Azure-StudentGrades-Connection"
                    appType: "webApp"
                    appName: "studentgrades-prod"
                    package: "$(Pipeline.Workspace)/drop/*.zip"
