<?xml version="1.0" encoding="utf-8"?>
<RuleSet Name="Custom Code Analysis Rules" Description="Optimized rules for code quality and Clean Code principles" ToolsVersion="16.0">
  
  <!-- Microsoft.CodeAnalysis.NetAnalyzers -->
  <Rules AnalyzerId="Microsoft.CodeAnalysis.NetAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.NetAnalyzers">
    
    <!-- Critical Design Rules (Errors) -->
    <Rule Id="CA1001" Action="Error" />   <!-- Types that own disposable fields should be disposable -->
    <Rule Id="CA1063" Action="Error" />   <!-- Implement IDisposable Correctly -->
    <Rule Id="CA1065" Action="Error" />   <!-- Do not raise exceptions in unexpected locations -->
    <Rule Id="CA1050" Action="Error" />   <!-- Declare types in namespaces -->
    
    <!-- Important Design Rules (Warnings) -->
    <Rule Id="CA1000" Action="Warning" /> <!-- Do not declare static members on generic types -->
    <Rule Id="CA1002" Action="Warning" /> <!-- Do not expose generic lists -->
    <Rule Id="CA1008" Action="Warning" /> <!-- Enums should have zero value -->
    <Rule Id="CA1010" Action="Warning" /> <!-- Collections should implement generic interface -->
    <Rule Id="CA1012" Action="Warning" /> <!-- Abstract types should not have constructors -->
    <Rule Id="CA1018" Action="Warning" /> <!-- Mark attributes with AttributeUsageAttribute -->
    <Rule Id="CA1024" Action="Warning" /> <!-- Use properties where appropriate -->
    <Rule Id="CA1027" Action="Warning" /> <!-- Mark enums with FlagsAttribute -->
    <Rule Id="CA1031" Action="Info" />    <!-- Do not catch general exception types (relaxed) -->
    <Rule Id="CA1032" Action="Warning" /> <!-- Implement standard exception constructors -->
    <Rule Id="CA1040" Action="Warning" /> <!-- Avoid empty interfaces -->
    <Rule Id="CA1041" Action="Warning" /> <!-- Provide ObsoleteAttribute message -->
    <Rule Id="CA1044" Action="Warning" /> <!-- Properties should not be write only -->
    <Rule Id="CA1047" Action="Warning" /> <!-- Do not declare protected member in sealed type -->
    <Rule Id="CA1051" Action="Warning" /> <!-- Do not declare visible instance fields -->
    <Rule Id="CA1052" Action="Warning" /> <!-- Static holder types should be Static or NotInheritable -->
    <Rule Id="CA1061" Action="Warning" /> <!-- Do not hide base class methods -->
    <Rule Id="CA1062" Action="Info" />    <!-- Validate arguments of public methods (relaxed) -->
    <Rule Id="CA1064" Action="Warning" /> <!-- Exceptions should be public -->
    <Rule Id="CA1066" Action="Warning" /> <!-- Type should implement IEquatable<T> because it overrides Equals -->
    <Rule Id="CA1067" Action="Warning" /> <!-- Override Object.Equals(object) when implementing IEquatable<T> -->
    <Rule Id="CA1068" Action="Warning" /> <!-- CancellationToken parameters must come last -->
    <Rule Id="CA1069" Action="Warning" /> <!-- Enums values should not be duplicated -->
    <Rule Id="CA1070" Action="Warning" /> <!-- Do not declare event fields as virtual -->
    
    <!-- Disabled Design Rules -->
    <Rule Id="CA1014" Action="None" />    <!-- Mark assemblies with CLSCompliant -->
    <Rule Id="CA1016" Action="None" />    <!-- Mark assemblies with assembly version -->
    <Rule Id="CA1017" Action="None" />    <!-- Mark assemblies with ComVisible -->
    <Rule Id="CA1054" Action="None" />    <!-- Uri parameters should not be strings -->
    <Rule Id="CA1055" Action="None" />    <!-- Uri return values should not be strings -->
    <Rule Id="CA1056" Action="None" />    <!-- Uri properties should not be strings -->
    
    <!-- Globalization Rules -->
    <Rule Id="CA1303" Action="None" />    <!-- Do not pass literals as localized parameters -->
    <Rule Id="CA1304" Action="Info" />    <!-- Specify CultureInfo -->
    <Rule Id="CA1305" Action="Info" />    <!-- Specify IFormatProvider -->
    <Rule Id="CA1307" Action="Warning" /> <!-- Specify StringComparison -->
    <Rule Id="CA1309" Action="Warning" /> <!-- Use ordinal stringcomparison -->
    <Rule Id="CA1310" Action="Warning" /> <!-- Specify StringComparison for correctness -->
    
    <!-- Naming Rules -->
    <Rule Id="CA1707" Action="None" />    <!-- Identifiers should not contain underscores (conflicts with our naming) -->
    <Rule Id="CA1708" Action="Warning" /> <!-- Identifiers should differ by more than case -->
    <Rule Id="CA1710" Action="Info" />    <!-- Identifiers should have correct suffix -->
    <Rule Id="CA1711" Action="Info" />    <!-- Identifiers should not have incorrect suffix -->
    <Rule Id="CA1715" Action="Warning" /> <!-- Identifiers should have correct prefix -->
    <Rule Id="CA1716" Action="Warning" /> <!-- Identifiers should not match keywords -->
    <Rule Id="CA1720" Action="Info" />    <!-- Identifier contains type name -->
    <Rule Id="CA1721" Action="Warning" /> <!-- Property names should not match get methods -->
    <Rule Id="CA1724" Action="Info" />    <!-- Type names should not match namespaces -->
    <Rule Id="CA1725" Action="Warning" /> <!-- Parameter names should match base declaration -->
    
    <!-- Performance Rules (High Priority) -->
    <Rule Id="CA1805" Action="Warning" /> <!-- Do not initialize unnecessarily -->
    <Rule Id="CA1810" Action="Warning" /> <!-- Initialize reference type static fields inline -->
    <Rule Id="CA1812" Action="Warning" /> <!-- Avoid uninstantiated internal classes -->
    <Rule Id="CA1813" Action="Warning" /> <!-- Avoid unsealed attributes -->
    <Rule Id="CA1815" Action="Warning" /> <!-- Override equals and operator equals on value types -->
    <Rule Id="CA1819" Action="Warning" /> <!-- Properties should not return arrays -->
    <Rule Id="CA1820" Action="Warning" /> <!-- Test for empty strings using string length -->
    <Rule Id="CA1821" Action="Warning" /> <!-- Remove empty Finalizers -->
    <Rule Id="CA1822" Action="Info" />    <!-- Mark members as static (relaxed) -->
    <Rule Id="CA1823" Action="Warning" /> <!-- Avoid unused private fields -->
    <Rule Id="CA1825" Action="Warning" /> <!-- Avoid zero-length array allocations -->
    <Rule Id="CA1826" Action="Warning" /> <!-- Do not use Count() when Any() can be used -->
    <Rule Id="CA1827" Action="Warning" /> <!-- Do not use Count() when Any() can be used -->
    <Rule Id="CA1829" Action="Warning" /> <!-- Use Length/Count property instead of Count() when available -->
    <Rule Id="CA1834" Action="Warning" /> <!-- Consider using 'StringBuilder.Append(char)' when applicable -->
    <Rule Id="CA1835" Action="Warning" /> <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' -->
    <Rule Id="CA1836" Action="Warning" /> <!-- Prefer IsEmpty over Count -->
    <Rule Id="CA1841" Action="Warning" /> <!-- Prefer Dictionary.Contains methods -->
    <Rule Id="CA1844" Action="Warning" /> <!-- Provide memory-based overrides of async methods when subclassing 'Stream' -->
    <Rule Id="CA1845" Action="Warning" /> <!-- Use span-based 'string.Concat' -->
    <Rule Id="CA1846" Action="Warning" /> <!-- Prefer 'AsSpan' over 'Substring' -->
    <Rule Id="CA1847" Action="Warning" /> <!-- Use char literal for a single character lookup -->
    <Rule Id="CA1848" Action="Info" />    <!-- Use the LoggerMessage delegates -->
    <Rule Id="CA1849" Action="Warning" /> <!-- Call async methods when in an async method -->
    
    <!-- Reliability Rules -->
    <Rule Id="CA2000" Action="Warning" /> <!-- Dispose objects before losing scope -->
    <Rule Id="CA2002" Action="Warning" /> <!-- Do not lock on objects with weak identity -->
    <Rule Id="CA2007" Action="None" />    <!-- Consider calling ConfigureAwait on the awaited task -->
    <Rule Id="CA2008" Action="Warning" /> <!-- Do not create tasks without passing a TaskScheduler -->
    <Rule Id="CA2009" Action="Warning" /> <!-- Do not call ToImmutableCollection on an ImmutableCollection value -->
    <Rule Id="CA2011" Action="Warning" /> <!-- Avoid infinite recursion -->
    <Rule Id="CA2012" Action="Warning" /> <!-- Use ValueTasks correctly -->
    <Rule Id="CA2013" Action="Warning" /> <!-- Do not use ReferenceEquals with value types -->
    <Rule Id="CA2014" Action="Warning" /> <!-- Do not use stackalloc in loops -->
    <Rule Id="CA2015" Action="Warning" /> <!-- Do not define finalizers for types derived from MemoryManager<T> -->
    <Rule Id="CA2016" Action="Warning" /> <!-- Forward the 'CancellationToken' parameter to methods that take one -->
    
    <!-- Security Rules (Essential) -->
    <Rule Id="CA2100" Action="Warning" /> <!-- Review SQL queries for security vulnerabilities -->
    <Rule Id="CA2109" Action="Warning" /> <!-- Review visible event handlers -->
    <Rule Id="CA2119" Action="Warning" /> <!-- Seal methods that satisfy private interfaces -->
    <Rule Id="CA2153" Action="Warning" /> <!-- Do Not Catch Corrupted State Exceptions -->
    
    <!-- Usage Rules -->
    <Rule Id="CA2200" Action="Warning" /> <!-- Rethrow to preserve stack details -->
    <Rule Id="CA2201" Action="Warning" /> <!-- Do not raise reserved exception types -->
    <Rule Id="CA2207" Action="Warning" /> <!-- Initialize value type static fields inline -->
    <Rule Id="CA2208" Action="Warning" /> <!-- Instantiate argument exceptions correctly -->
    <Rule Id="CA2211" Action="Warning" /> <!-- Non-constant fields should not be visible -->
    <Rule Id="CA2213" Action="Warning" /> <!-- Disposable fields should be disposed -->
    <Rule Id="CA2214" Action="Warning" /> <!-- Do not call overridable methods in constructors -->
    <Rule Id="CA2215" Action="Warning" /> <!-- Dispose methods should call base class dispose -->
    <Rule Id="CA2216" Action="Warning" /> <!-- Disposable types should declare finalizer -->
    <Rule Id="CA2217" Action="Warning" /> <!-- Do not mark enums with FlagsAttribute -->
    <Rule Id="CA2218" Action="Warning" /> <!-- Override GetHashCode on overriding Equals -->
    <Rule Id="CA2219" Action="Warning" /> <!-- Do not raise exceptions in finally clauses -->
    <Rule Id="CA2224" Action="Warning" /> <!-- Override Equals on overloading operator equals -->
    <Rule Id="CA2225" Action="Warning" /> <!-- Operator overloads have named alternates -->
    <Rule Id="CA2226" Action="Warning" /> <!-- Operators should have symmetrical overloads -->
    <Rule Id="CA2227" Action="Warning" /> <!-- Collection properties should be read only -->
    <Rule Id="CA2229" Action="Warning" /> <!-- Implement serialization constructors -->
    <Rule Id="CA2231" Action="Warning" /> <!-- Overload operator equals on overriding value type Equals -->
    <Rule Id="CA2234" Action="Warning" /> <!-- Pass system uri objects instead of strings -->
    <Rule Id="CA2235" Action="Warning" /> <!-- Mark all non-serializable fields -->
    <Rule Id="CA2237" Action="Warning" /> <!-- Mark ISerializable types with serializable -->
    <Rule Id="CA2241" Action="Warning" /> <!-- Provide correct arguments to formatting methods -->
    <Rule Id="CA2242" Action="Warning" /> <!-- Test for NaN correctly -->
    <Rule Id="CA2243" Action="Warning" /> <!-- Attribute string literals should parse correctly -->
    <Rule Id="CA2244" Action="Warning" /> <!-- Do not duplicate indexed element initializations -->
    <Rule Id="CA2245" Action="Warning" /> <!-- Do not assign a property to itself -->
    <Rule Id="CA2246" Action="Warning" /> <!-- Assigning symbol and its member in the same statement -->
    <Rule Id="CA2247" Action="Warning" /> <!-- Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum -->
    <Rule Id="CA2248" Action="Warning" /> <!-- Provide correct 'enum' argument to 'Enum.HasFlag' -->
    <Rule Id="CA2249" Action="Warning" /> <!-- Consider using 'string.Contains' instead of 'string.IndexOf' -->
    <Rule Id="CA2250" Action="Warning" /> <!-- Use 'ThrowIfCancellationRequested' -->
    <Rule Id="CA2251" Action="Warning" /> <!-- Use 'string.Equals' -->
    <Rule Id="CA2252" Action="Warning" /> <!-- This API requires opting into preview features -->
    <Rule Id="CA2253" Action="Warning" /> <!-- Named placeholders should not be numeric values -->
    <Rule Id="CA2254" Action="Warning" /> <!-- Template should be a static expression -->
    <Rule Id="CA2255" Action="Warning" /> <!-- The 'ModuleInitializer' attribute should not be used in libraries -->
    <Rule Id="CA2256" Action="Warning" /> <!-- All members declared in parent interfaces must have an implementation in all applied DynamicInterfaceCastableImplementation-attributed interfaces -->
    <Rule Id="CA2257" Action="Warning" /> <!-- Members defined on an interface with the 'DynamicInterfaceCastableImplementationAttribute' should be 'static' -->
    <Rule Id="CA2258" Action="Warning" /> <!-- Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported -->
  </Rules>

  <!-- StyleCop.Analyzers -->
  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers">
    <!-- Documentation Rules -->
    <Rule Id="SA1600" Action="None" />    <!-- Elements should be documented -->
    <Rule Id="SA1601" Action="None" />    <!-- Partial elements should be documented -->
    <Rule Id="SA1602" Action="None" />    <!-- Enumeration items should be documented -->
    <Rule Id="SA1633" Action="None" />    <!-- File should have header -->
    
    <!-- Layout Rules -->
    <Rule Id="SA1200" Action="None" />    <!-- Using directives should be placed correctly -->
    <Rule Id="SA1210" Action="Warning" /> <!-- Using directives should be ordered alphabetically by namespace -->
    <Rule Id="SA1216" Action="Warning" /> <!-- Using static directives should be placed at the correct location -->
    <Rule Id="SA1217" Action="Warning" /> <!-- Using static directives should be ordered alphabetically -->
    
    <!-- Naming Rules -->
    <Rule Id="SA1300" Action="Warning" /> <!-- Element should begin with upper-case letter -->
    <Rule Id="SA1302" Action="Warning" /> <!-- Interface names should begin with I -->
    <Rule Id="SA1303" Action="Warning" /> <!-- Const field names should begin with upper-case letter -->
    <Rule Id="SA1304" Action="Warning" /> <!-- Non-private readonly fields should begin with upper-case letter -->
    <Rule Id="SA1306" Action="Warning" /> <!-- Field names should begin with lower-case letter -->
    <Rule Id="SA1307" Action="Warning" /> <!-- Accessible fields should begin with upper-case letter -->
    <Rule Id="SA1308" Action="Warning" /> <!-- Variable names should not be prefixed -->
    <Rule Id="SA1309" Action="None" />    <!-- Field names should not begin with underscore (we use _camelCase) -->
    <Rule Id="SA1310" Action="Warning" /> <!-- Field names should not contain underscore -->
    <Rule Id="SA1311" Action="Warning" /> <!-- Static readonly fields should begin with upper-case letter -->
    <Rule Id="SA1312" Action="Warning" /> <!-- Variable names should begin with lower-case letter -->
    <Rule Id="SA1313" Action="Warning" /> <!-- Parameter names should begin with lower-case letter -->
    
    <!-- Ordering Rules -->
    <Rule Id="SA1200" Action="None" />    <!-- Using directives should be placed correctly -->
    <Rule Id="SA1201" Action="Warning" /> <!-- Elements should appear in the correct order -->
    <Rule Id="SA1202" Action="Warning" /> <!-- Elements should be ordered by access -->
    <Rule Id="SA1203" Action="Warning" /> <!-- Constants should appear before fields -->
    <Rule Id="SA1204" Action="Warning" /> <!-- Static elements should appear before instance elements -->
    <Rule Id="SA1214" Action="Warning" /> <!-- Readonly fields should appear before non-readonly fields -->
    
    <!-- Readability Rules -->
    <Rule Id="SA1101" Action="None" />    <!-- Prefix local calls with this -->
    <Rule Id="SA1116" Action="Warning" /> <!-- Split parameters should start on line after declaration -->
    <Rule Id="SA1117" Action="Warning" /> <!-- Parameters should be on same line or separate lines -->
    <Rule Id="SA1118" Action="Warning" /> <!-- Parameter should not span multiple lines -->
    <Rule Id="SA1127" Action="Warning" /> <!-- Generic type constraints should be on their own line -->
    <Rule Id="SA1128" Action="Warning" /> <!-- Put constructor initializers on their own line -->
    <Rule Id="SA1130" Action="Warning" /> <!-- Use lambda syntax -->
    <Rule Id="SA1131" Action="Warning" /> <!-- Use readable conditions -->
    <Rule Id="SA1133" Action="Warning" /> <!-- Do not combine attributes -->
    <Rule Id="SA1134" Action="Warning" /> <!-- Attributes should not share line -->
    <Rule Id="SA1135" Action="Warning" /> <!-- Using directives should be qualified -->
    <Rule Id="SA1136" Action="Warning" /> <!-- Enum values should be on separate lines -->
    <Rule Id="SA1137" Action="Warning" /> <!-- Elements should have the same indentation -->
    
    <!-- Spacing Rules -->
    <Rule Id="SA1000" Action="Warning" /> <!-- Keywords should be spaced correctly -->
    <Rule Id="SA1001" Action="Warning" /> <!-- Commas should be spaced correctly -->
    <Rule Id="SA1002" Action="Warning" /> <!-- Semicolons should be spaced correctly -->
    <Rule Id="SA1003" Action="Warning" /> <!-- Symbols should be spaced correctly -->
    <Rule Id="SA1004" Action="Warning" /> <!-- Documentation lines should begin with single space -->
    <Rule Id="SA1005" Action="Warning" /> <!-- Single line comments should begin with single space -->
    <Rule Id="SA1006" Action="Warning" /> <!-- Preprocessor keywords should not be preceded by space -->
    <Rule Id="SA1007" Action="Warning" /> <!-- Operator keyword should be followed by space -->
    <Rule Id="SA1008" Action="Warning" /> <!-- Opening parenthesis should be spaced correctly -->
    <Rule Id="SA1009" Action="Warning" /> <!-- Closing parenthesis should be spaced correctly -->
    <Rule Id="SA1010" Action="Warning" /> <!-- Opening square brackets should be spaced correctly -->
    <Rule Id="SA1011" Action="Warning" /> <!-- Closing square brackets should be spaced correctly -->
    <Rule Id="SA1012" Action="Warning" /> <!-- Opening braces should be spaced correctly -->
    <Rule Id="SA1013" Action="Warning" /> <!-- Closing braces should be spaced correctly -->
    <Rule Id="SA1014" Action="Warning" /> <!-- Opening generic brackets should be spaced correctly -->
    <Rule Id="SA1015" Action="Warning" /> <!-- Closing generic brackets should be spaced correctly -->
    <Rule Id="SA1016" Action="Warning" /> <!-- Opening attribute brackets should be spaced correctly -->
    <Rule Id="SA1017" Action="Warning" /> <!-- Closing attribute brackets should be spaced correctly -->
    <Rule Id="SA1018" Action="Warning" /> <!-- Nullable type symbols should be spaced correctly -->
    <Rule Id="SA1019" Action="Warning" /> <!-- Member access symbols should be spaced correctly -->
    <Rule Id="SA1020" Action="Warning" /> <!-- Increment decrement symbols should be spaced correctly -->
    <Rule Id="SA1021" Action="Warning" /> <!-- Negative signs should be spaced correctly -->
    <Rule Id="SA1022" Action="Warning" /> <!-- Positive signs should be spaced correctly -->
    <Rule Id="SA1023" Action="Warning" /> <!-- Dereference and access of symbols should be spaced correctly -->
    <Rule Id="SA1024" Action="Warning" /> <!-- Colons should be spaced correctly -->
    <Rule Id="SA1025" Action="Warning" /> <!-- Code should not contain multiple whitespace in a row -->
    <Rule Id="SA1026" Action="Warning" /> <!-- Code should not contain space after new or stackalloc keyword in implicitly typed array allocation -->
    <Rule Id="SA1027" Action="Warning" /> <!-- Use tabs correctly -->
    <Rule Id="SA1028" Action="Warning" /> <!-- Code should not contain trailing whitespace -->
  </Rules>

</RuleSet>

